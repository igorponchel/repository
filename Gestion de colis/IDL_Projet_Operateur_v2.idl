module OperateurDeTransportObjet {

	struct CoordBancaire {
	
		long numeroCarte;
		string proprietaire;
		string date;
		long numDos;
	};
	
	struct CoordBancairePro {
	
		long codeBanque;
		long codeGuichet;
		long numCompte;
		long cleRIB;
	};

	struct Adresse {
		
		string numeroRue;
		string nomRue;
		string ville;
		long departement;
		string pays;
	};

	enum EtatObjet {depose, enTransit, livre, delivre}; // delivré signifie que le destinataire l'a récupéré.
	
	struct Objet {
		
		string idObjet;
		EtatObjet etatObjet;
		long numExpediteur;
		long numDestinataire;
		long numeroCasierDepart;
		long numeroCasierArrivee;
	};
	
	struct InfoObjet {
		
		string idObjet;
		EtatObjet etatObjet;

	};
	
	interface Transporteur {
	
		oneway void notifierOffreTransport(in string nomStationDepart, in string nomStationArrivee, in string numeroOffre);
		oneway void notifierOffrePriseEnCharge(in string numeroOffre);
	};
		
	interface Adherent {
	
		oneway void notifierColisArrive(in string idObjet);
	};
	
	interface GestionUtilisateurs {
	
		struct DemandeAdhesion {
			
			string prenomAdherent;
			string nomAdherent;
			Adresse adresseAdherent;
			CoordBancaire coordonneesBancaires;
		};
	
		struct Adhesion {
		
			long numeroAdherent;
			string motDePasse;
			string nomAdherent;
			string prenomAdherent;
			long zoneAdherent;
		};

		exception AdherentExistantException {
			string explication;
		};
		exception AdherentInexistantException {
			string explication;
		};
		exception TransInexistantException {
			string explication;
		};
		
		Adhesion demandeAdhesion(in DemandeAdhesion demandeAdhesion) raises (AdherentExistantException);
		boolean verifierAdherent(in long numeroAdherent, in string motDePasse); 
		long getNumAdherent(in string nomAdherent, in string prenomAdherent) raises(AdherentInexistantException);
		long getZoneAdherent(in string nomAdherent, in string prenomAdherent) raises(AdherentInexistantException);
		oneway void notifierConnexionAdh(in long numeroAdherent, in Adherent adherent);
		oneway void notifierDeconnexionAdh(in long numeroAdherent);
		Adherent getAdherentSiConnecte(in long numeroAdherent); // ajouter une exception
	};
	
	interface GestionnairePaiement {
	
		short debiter(in CoordBancaire coordonneesBancaires, in long somme); // une seule suffit quelque soit l'entité
		short crediter(in CoordBancairePro coordonneesBancairesPro, in long somme);
	};
	
	interface GestionnaireTransportObjet {
				
	
		struct DemandeInscriptionTrans {
	
			string nomTransporteur;
			Adresse adresseTransporteur;
			CoordBancairePro coordonneesBancairesPro;
		};
		
		struct InscriptionTrans {
		
			long numeroInscritTrans;
			string nomTransporteur;
		};
		
		exception ObjetInexistantException {
			string explication;
		};
		
		exception TransExistantException {
			string explication;
		};
		
		typedef sequence<InfoObjet> ListeInfoObjet;
		
		InscriptionTrans demandeInscriptionTrans(in DemandeInscriptionTrans demandeInscriptionTrans) raises (TransExistantException);
		//retourne le codeTransport à la station
		string notifierOffreTransport(in string nomStationDepart, in string nomStationArrivee);
		string notifierOffreAcceptee(in long numeroTransporteur, in string numeroOffre);
		boolean verifierTransporteur(in long numeroTransporteur, in string codeTransport);
		oneway void enregistrerObjet(in Objet objet);
		void notifierEtatObjet(in string idObjet, in EtatObjet etatObjet) raises (ObjetInexistantException);
		ListeInfoObjet consulterEtatObjet(in long numeroAdherent) raises (ObjetInexistantException);
		oneway void notifierConnexion(in long numeroTransporteur, in Transporteur transporteur);
		oneway void notifierDeconnexion(in long numeroTransporteur);
	
	};
	
	interface Station {
		
		enum EtatCasier {vide, occupe};
		
		struct Casier {
		
			long numeroCasier;
			EtatCasier etatCasier;
		};
		
		exception AucunCasierDisponibleException {
			string explication;
		};
	

		long reserverCasier(in long numeroAdherent) raises (AucunCasierDisponibleException);
		//signale à la station distante le couple codeTransport/CasierDistant pour assurer la recherche lors de la livraison
		oneway void notifierCodeTransport(in long numeroCasier, in string codeTransport);
	};
};