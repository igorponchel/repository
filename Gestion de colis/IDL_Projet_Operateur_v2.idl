module OperateurDeTransportObjet {

	struct CoordBancaire {
	
		long numeroCarte;
		string proprietaire;
		string date;
		long numDos;
	};
	
	struct CoordBancairePro {
	
		long codeBanque;
		long codeGuichet;
		long numCompte;
		long cleRIB;
	};

	struct Adresse {
		
		string numeroRue;
		string nomRue;
		string ville;
		long departement;
		string pays;
	};
	
	interface GestionUtilisateurs {
	
		struct DemandeInscriptionTrans {
	
			string nomTransporteur;
			Adresse adresseTransporteur;
			CoordBancairePro coordonneesBancairesPro;
		};
	
		struct DemandeAdhesion {
			
			string prenomAdherent;
			string nomAdherent;
			Adresse adresseAdherent;
			CoordBancaire coordonneesBancaires;
		};
	
		struct Adhesion {
		
			long numeroAdherent;
			string nomAdherent;
			string prenomAdherent;
			long zoneAdherent;
		};
		
		struct InscriptionTrans {
		
			long numeroInscritTrans;
			string nomTransporteur;
		};
	
		exception AdherentExistantException {
			string explication;
		};
		exception TransExistantException {
			string explication;
		};
		exception AdherentInexistantException {
			string explication;
		};
		exception TransInexistantException {
			string explication;
		};
		
		Adhesion demandeAdhesion(in DemandeAdhesion demandeAdhesion) raises (AdherentExistantException);
		InscriptionTrans demandeInscriptionTrans(in DemandeInscriptionTrans demandeInscriptionTrans) raises (TransExistantException);
		boolean verifierAdherent(in short codeVerif); //On suppose que le GestionnaireUtilisateur contient les IOR des adhérents
		boolean verifierTransporteur(in short codeVerif); //On suppose que le GestionnaireUtilisateur contient les IOR des transporteurs
		long getNumAdherent(in string nomAdherent, in string prenomAdherent) raises(AdherentInexistantException);
	};
	
	interface GestionnairePaiement {
	
		short debiter(in CoordBancaire coordonneesBancaires, in long somme); // une seule suffit quelque soit l'entité
		short crediter(in CoordBancairePro coordonneesBancairesPro, in long somme);
	};
	
	interface Station {
		
		enum EtatCasier {vide, occupe};
		
		struct Casier {
		
			long numeroCasier;
			EtatCasier etatCasier;
		};
		
		exception AucunCasierDisponibleException {
			string explication;
		};
	
		boolean verifierDispoCasier(); //on sait déjà de quelle station il s'agit vu qu'on invoque la méthode dessus
		long reserverCasier(in string codeTransport) raises (AucunCasierDisponibleException);
	};
	
	interface GestionnaireTransportObjet {
	
		enum EtatObjet {depose, enTransit, livre, delivre}; // delivré signifie que le destinataire l'a récupéré.
	
		struct Objet {
		
			long numeroObjet;
			EtatObjet etatObjet;
		};
		
		exception ObjetInexistantException {
			string explication;
		};
		
		oneway void notifierOffreTransport(in long numeroStation);
		oneway void notifierOffreAcceptee(in long numeroTransporteur);
		boolean verifierTransporteur(in long numeroTransporteur, in string codeTransport);
		void notifierEtatObjet(in long numeroObjet, in EtatObjet etatObjet) raises (ObjetInexistantException);
		EtatObjet consulterEtatObjet(in string numeroObjet) raises (ObjetInexistantException);
	};
	
	interface Adherent {
	
		oneway void notifierColisArrive(in long numeroObjet);
	};
	
	interface Transporteur {
	
		oneway void notifierOffreTransport(in long numeroStation, in string codeTransport);
	};
};